import {Schema, model, Types} from "mongoose";

export interface IEpicEpisode {
    user?: any,
    cat1: string,
    cat2: string,
    episodeId: string,
    responsibleProvId: string,
    responsibleProvName: string,
    billingService: string,
    csn: string,
    procedure: string,
    date: Date,
    day: string,
    anesStart: Date,
    anesStop: Date,
    surgeryDate: Date,
    outORDate: Date,
    logId: string,
    mrn: string,
    birthDate: Date,
    age: number,
    deptId: string,
    locationId: string,
    locationName: string,
    orLocation: string,
    room: string,
    service: string,
    primaryPhysicianId: string,
    primaryPhysicianName: string,
    encounterClosed: string,
    encounterClosedDate: Date,
    anMinutes: number,
    inRoomMinutes: number,
    fiscalYear: number,
    anMonth: string,
    fpiFiscalQ: number,
    qtr: string
}

const schema = new Schema<IEpicEpisode>({
    user: {
        type: Types.ObjectId,
        ref: 'User',
    },
    cat1: String,
    cat2: String,
    episodeId: String,
    responsibleProvId: String,
    responsibleProvName: String,
    billingService: String,
    csn: String,
    procedure: String,
    date: Date,
    day: String,
    anesStart: Date,
    anesStop: Date,
    surgeryDate: Date,
    outORDate: Date,
    logId: String,
    mrn: String,
    birthDate: Date,
    age: Number,
    deptId: String,
    locationId: String,
    locationName: String,
    orLocation: String,
    room: String,
    service: String,
    primaryPhysicianId: String,
    primaryPhysicianName: String,
    encounterClosed: String,
    encounterClosedDate: Date,
    anMinutes: Number,
    inRoomMinutes: Number,
    fiscalYear: Number,
    anMonth: String,
    fpiFiscalQ: Number,
    qtr: String
}, { timestamps: true });

export const EpicEpisode = model<IEpicEpisode>('EpicEpisode', schema);
